<!DOCTYPE html>
<html lang="en">

<head>

	<meta charset="UTF-8" />

	<meta name="viewport" content="width=device-width" />
	<meta name="Description" content="{{ config.title }} - {{ config.description }}">

	<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
	<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
	<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
	<link rel="manifest" href="/site.webmanifest">
	<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#ec5b5c">
	<meta name="msapplication-TileColor" content="#da532c">
	<meta name="theme-color" content="#EC5B5C">

	<meta name="twitter:card" content="summary" />
	<meta name="twitter:site" content="@rknightuk" />
	<meta name="twitter:title" content="{{ config.title }}" />
	<meta name="twitter:description" content="{{ config.description }}" />
	<meta name="twitter:image" content="https://potimages.rknight.me/assets/img/preview-image.png" />

	<title>{{ config.title }}</title>

	<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/kognise/water.css@latest/dist/light.min.css">

	<style type="text/css">
		header {
			text-align: center;
		}

		header h1 {
			margin-bottom: 0;
		}

		header p {
			margin-top: 0;
		}

		.image-wrapper {
			margin: 0 auto;
			background: {{ config.primary }};
			display: flex;
			align-items: center;
			justify-content: center;
		}

		#preview {
			width: 316px;
			height: 205px;
			box-shadow: 3px 3px 2px 0px rgba(214,214,214,1);
			margin-bottom: 20px;
			border-radius: 10px;
		}

		.icon {
			color: #f3fdff;
		}

		#preview svg {
			width: 100px;
			height: 100px;
		}

		.wrapper {
			overflow: hidden;
			height: 0;
		}

		#generated {
			width: 1266px;
			height: 822px;
		}

		#generated svg {
			width: 400px;
			height: 400px;
		}

		.manage {
			text-align: center;
		}

		.buttons {
			display: flex;
			align-items: center;
			justify-content: center;
		}

		.share-link {
			display: flex;
			justify-content: center;
			align-items: center;
			font-weight: bold;
		}

		.color-picker {
			border-radius: 0;
			padding: 0;
		}

		.color-pickers {
			margin-bottom: 10px;
		}

		.color-wrapper {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(40px, 1fr));
			align-items: center;
			justify-content: center;
		}

		.color {
			width: 40px;
			height: 40px;
			cursor: pointer;
			margin: 0 auto;
			border: 1px solid #b5b5b5;
		}

		.image-picker {
			display: flex;
		}

		.image {
			flex: 1;
			max-width: 100px;
			margin-right: 5px;
			cursor: pointer;
			border-radius: 5px;
			box-shadow: 3px 3px 2px 0px rgba(214,214,214,1);
		}

		#calc-contrast {
			margin-bottom: 15px;
		}

		.icon-search-wrapper {
			margin-top: 20px;
		}

		.icon-search {
			width: 100%;
		}

		.icons {
			height: 400px;
			overflow: auto;
			display: flex;
			flex-wrap: wrap;
			justify-content: space-between;
		}

		.icons__single {
			text-align: center;
			cursor: pointer;
			padding: 5px;
			flex-basis: 75px;
			font-size: 40px;
		}

		.icons__single:hover {
			background: #f3f3f3;
		}

		footer {
			margin-top: 30px;
			text-align: center;
			font-size: 14px;
		}

	</style>

	<script src="https://kit.fontawesome.com/1d7e8c2c3e.js" crossorigin="anonymous"></script>
	<script src="/assets/js/dom-to-image.min.js"></script>
	<script src="/assets/js/FileSaver.min.js"></script>

</head>	

<body onload="run()">

	<header>
		<h1>{{ config.title }}</h1>
		<p>By <a href="https://twitter.com/rknightuk">Robb Knight</a></p>
	</header>
	<div id="preview" class="image-wrapper preview withBackground">
		<div class="icon">
			<i id="preview-icon" class="{{ config.icon.prefix }} fa-{{ config.icon.icon }}"></i>
		</div>
	</div>

	<div class="manage">
		<div class="buttons">
			<button id="random"><i class="fas fa-random"></i> Randomise</button>
			<button id="download"><i class="fas fa-download"></i> Download</button>
		</div>
		<div class="share-link">
			<button onclick="shareToTwitter()"><i class="fab fa-twitter"></i> Tweet</button>
		</div>
	</div>

	<div class="wrapper">
		<div id="generated" class="image-wrapper withBackground">
			<div class="icon">
				<i id="generated-icon" class="{{ config.icon.prefix }} fa-{{ config.icon.icon }}"></i>
			</div>
		</div>
	</div>

	<div class="color-pickers">
		<h3>Background Colour:</h3>
		<div class="color-wrapper">
			{% for color in colors.background %}
				<div class="color" onclick="setBackgroundColor('{{ color }}')" style="background: {{ color }};"></div>	
			{% endfor %}
			<input type="color" class="color color-picker" id="background-color-picker" value="{{ config.primary }}">
		</div>

		<h3>or Image:</h3>
		<div class="image-picker">
			{% for image in images %}
				<img 
					src="/assets/img/backgrounds/{{ image.path }}" 
					class="image" 
					onclick="setBackgroundImage('/assets/img/backgrounds/{{ image.path }}', {% if image.type === 'light' %}true{% else %}false{% endif %})"
				>
			{% endfor %}
		</div>

		<h3>Icon Colour:</h3>
		<input type="checkbox" id="calc-contrast" checked="checked"><label for="calc-contrast">automatically adjust icon contrast</label>
		<div class="color-wrapper">
			{% for color in colors.icon %}
				<div class="color" onclick="setIconColor('{{ color }}')" style="background: {{ color }};"></div>	
			{% endfor %}
			<input type="color" class="color color-picker" id="icon-color-picker" value="{{ config.light }}">
		</div>
	</div>

	<div class="icon-search-wrapper">
		<input type="text" onkeyup="searchIcons()" id="icon-search" class="icon-search" placeholder="Search for an icon">
		<div class="icons">
			{% for icon in icons %}
				<div 
					data-key="{{ icon.key }}"
					data-prefix="{% if icon.free.includes('brands') %}fab{% else %}fas{% endif %}"
					data-keywords="{{ icon.label.toLowerCase() }} {% for keyword in icon.search.terms %} {{ keyword }} {% endfor%}"
					class="icons__single" 
					onclick="setIcon(
						'{{ icon.key }}', 
						'{% if icon.free.includes('brands') %}fab{% else %}fas{% endif %}'
					)"
				">
					<i class="{% if icon.free.includes('brands') %}fab{% else %}fas{% endif %} fa-{{ icon.key }}"></i>
				</div>
			{% endfor %}
		</div>
	</div>

	<footer>
		{{ config.title }} by <a href="https://rknight.me">Robb Knight</a> | Icons from <a href="https://fontawesome.com/">Font Awesome</a> | <a href="https://github.com/rknightuk/monzo-pot-image-generator">Source on GitHub</a>
	</footer>

	<script>

		function shareToTwitter() {
			window.open('https://twitter.com/intent/tweet?text=Monzo Pot Image Generator by @rknightuk&url=' + encodeURIComponent(window.location.href))
		}

		function updateData(key, value) {
			window.PotData[key] = value
		}

		function setIconColor(iconColor) {		
			Array.from(document.getElementsByClassName('icon')).forEach(function(icon) {
				icon.style.color = iconColor
			})
			document.getElementById('icon-color-picker').value = iconColor
			document.getElementById('generated-icon').value = iconColor
			document.getElementById('preview-icon').value = iconColor
		}

		function setIconColorFromBackground(bgColor) {
			if (!document.getElementById('calc-contrast').checked) return
		   var nThreshold = 105;
		   var components = getRGBComponents(bgColor);
		   var bgDelta = (components.R * 0.299) + (components.G * 0.587) + (components.B * 0.114);

		   const iconColor = ((255 - bgDelta) < nThreshold) ? "{{ config.dark }}" : "{{ config.light }}";
		   setIconColor(iconColor)
		   updateData('color', iconColor)
		}

		function getRGBComponents(color) {       

		    var r = color.substring(1, 3);
		    var g = color.substring(3, 5);
		    var b = color.substring(5, 7);

		    return {
		       R: parseInt(r, 16),
		       G: parseInt(g, 16),
		       B: parseInt(b, 16)
		    };
		}

		setBackgroundColor = function(color, skipContrast) {
			document.getElementById('generated').style.background = color
			document.getElementById('preview').style.background = color
			document.getElementById('background-color-picker').value = color
			if (!skipContrast) setIconColorFromBackground(color)
			updateData('background', color)
		}

		setBackgroundImage = function(backgroundImage, setToDarkIcon) {
			document.getElementById('generated').style.background = 'url(' + backgroundImage + ')'
			document.getElementById('generated').style.backgroundSize = 'cover'
			document.getElementById('preview').style.background = 'url(' + backgroundImage + ')'
			document.getElementById('preview').style.backgroundSize = 'cover'
			setIconColor(setToDarkIcon ? "{{ config.dark }}" : "{{ config.light }}")
			updateData('image', backgroundImage)
		}

		setBackgroundColorFromInput = function() {
			setBackgroundColor(document.getElementById('background-color-picker').value)
		}

		setIconColorFromInput = function() {
			setIconColor(document.getElementById('icon-color-picker').value)
		}

		setIcon = function(icon, prefix) {
			document.getElementById('generated-icon').className = prefix + ' fa-' + icon
			document.getElementById('preview-icon').className = prefix + ' fa-' + icon
			updateData('icon', {
				icon: icon,
				prefix: prefix,
			})
		}

		searchIcons = function() {
			const search = document.getElementById('icon-search').value.toLowerCase()

			Array.from(document.getElementsByClassName('icons__single')).forEach(function(element) {
				element.style.display = element.dataset.keywords.includes(search) ? 'block' : 'none'
			})
		}

		document.getElementById('background-color-picker').addEventListener("input", setBackgroundColorFromInput, false)
		document.getElementById('icon-color-picker').addEventListener("input", setIconColorFromInput, false)

		document.getElementById('download').onclick = function() {
		  domtoimage.toBlob(document.getElementById('generated'))
		      .then(function (blob) {
		          window.saveAs(blob, 'monzo-pot-image-' + window.PotData.icon.icon + '-' + PotData.background.replace('#', '') + '.png');
		      });
		}

		document.getElementById('random').onclick = function() {
			const icons = Array.from(document.getElementsByClassName('icons__single'))
			const randomElement = icons[Math.floor(Math.random() * icons.length)]
			setIcon(randomElement.dataset.key, randomElement.dataset.prefix)
			var randomColor = '#' + Math.floor(Math.random()*16777215).toString(16)
			setBackgroundColor(randomColor)
		}

		run = function() {
			window.PotData = {
				icon: {
					icon: "{{ config.icon.icon }}",
					prefix: "{{ config.icon.prefix }}"
				},
				color: "{{ config.light }}",
				background: "{{ config.primary }}",
				image: null,
			}
		}
	</script>

	<script>
		FontAwesomeConfig = { autoReplaceSvg: 'nest' }
	</script>

	<a href="https://github.com/rknightuk/monzo-pot-image-generator" class="github-corner" aria-label="View source on GitHub"><svg width="50" height="50" viewBox="0 0 250 250" style="fill:{{config.primary}}; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>
</body>

</html>