<!DOCTYPE html>
<html lang="en">

<head>

	<meta charset="UTF-8" />

	<meta name="viewport" content="width=device-width" />
	<meta name="Description" content="{{ config.title }} - {{ config.description }}">

	<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
	<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
	<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
	<link rel="manifest" href="/site.webmanifest">
	<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#ec5b5c">
	<meta name="msapplication-TileColor" content="#da532c">
	<meta name="theme-color" content="#EC5B5C">

	<meta name="twitter:card" content="summary" />
	<meta name="twitter:site" content="@rknightuk" />
	<meta name="twitter:title" content="{{ config.title }}" />
	<meta name="twitter:description" content="{{ config.description }}" />
	<meta name="twitter:image" content="https://potimages.rknight.me/assets/img/preview-image.png" />

	<title>{{ config.title }}</title>

	<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/kognise/water.css@latest/dist/light.min.css">

	<style type="text/css">
		h2 {
			margin-top: 0;
		}

		.header {
			text-align: center;
		}

		.header__main {
			margin-bottom: 0;
		}

		.header__subtitle {
			margin-top: 0;
		}

		.image {
			display: flex;
		    align-items: center;
		    justify-content: center;
		    margin: 0 auto;
		    background: {{ config.primary }};
		    position: relative;
		    overflow: hidden;
		}

		.image__iconwrapper {
		    color: {{ config.light }};
		    position: absolute;
		}

		.image__iconwrapper svg {
			width: 100%!important;
			height: 100%!important;
		}

		.overlay-image {
			position: absolute;
		    top: 0;
		    right: 0;
		    left: 0;
		    bottom: 0;
		    width: 100%;
		    height: 100%;
		}

		#preview {
			width: 316px;
			height: 205px;
			border-radius: 10px;
			box-shadow: 3px 3px 2px 0px rgba(214,214,214,1);
		}

		#preview .image__iconwrapper {
			width: 100px;
		    height: 100px;
		}

		.generated-wrapper {
			overflow: hidden;
			height: 0;
		}

		#generated {
			width: 1266px;
			height: 822px;
		}

		#generated .image__iconwrapper {
			width: 400px;
		    height: 400px;
		}

		.size-wrapper {
			display: flex;
			justify-content: center;
			align-items: center;
		}

		.size-wrapper button {
			padding-left: 15px;
			padding-right: 15px;
		}

		#icon-size {
			margin-left: 0;
    		margin-right: 5px;
			margin-bottom: 5px;
			font-weight: bold;
			text-transform: uppercase;
		}

		.buttons {
			display: flex;
			align-items: center;
			justify-content: center;
			margin-top: 10px;
		}

		.config-wrapper {
			display: flex;
			flex-wrap: wrap;
		}

		.picker-wrapper {
			flex: 1;
		}

		@media (max-width: 700px) {
			.picker-wrapper {
				flex-basis: 50%;
			}
		}

		.picker {
			overflow: auto;
			padding: 5px;
		}

		.color {
			height: 30px;
			width: 30px;
			cursor: pointer;
			position: relative;
			outline: none;
			float: left;
			border-radius: 4px;
			margin: 0px 6px 6px 0px;
		}

		.color-input {
		    position: relative;
			float: left;
			width: 30px;
		    height: 30px;
		}

		.color-input input {
			outline: none;
			padding: 0;
		    margin: 0;
		    border-radius: 0;
		    width: 100%;
		    height: 100%;
		}

		.background {
			height: 50px;
			width: 75px;
			max-width: 100%;
			cursor: pointer;
			position: relative;
			outline: none;
			float: left;
			border-radius: 4px;
			margin: 0px 6px 6px 0px;
		}

		.icon-search-wrapper {
			margin-top: 20px;
		}

		.icon-search {
			width: 100%;
		    margin-left: -10px;
		}

		.icons {
			height: 400px;
			overflow: auto;
			display: flex;
			flex-wrap: wrap;
			justify-content: space-between;
		}

		.icons__single {
			text-align: center;
			cursor: pointer;
			padding: 5px;
			flex-basis: 75px;
			font-size: 40px;
		}

		.icons__single:hover {
			background: #f3f3f3;
		}

		.examples {
			display: flex;
			flex-wrap: wrap;
			margin-top: 5px;
		}

		.example-card {
		    position: relative;
		    float: left;
    		overflow: hidden;
			width: 75px;
			height: 50px;
			border-radius: 5px;
			display: flex;
			align-items: center;
			justify-content: center;
			cursor: pointer;
			margin-right: 5px;
			margin-bottom: 5px;
			flex-basis: 75px;
		}

		.example-card img,
		.example-card-icon {
			position: absolute;
		}

		.example-card img {
		    height: 100%;
		}

		.clear-history-button {
			padding: 3px 12px;
			text-transform: uppercase;
			font-size: 12px;
		}

		.footer {
			text-align: center;
		}

		.hex-input-wrap {
			display: flex;
    		align-items: center;
		    clear: both;
		    margin-bottom: 5px;
		}

		.hex-input-icon {
	        border: 1px solid #EEEFEE;
	        height: 36px;
	        width: 30px;
	        display: flex;
	        align-items: center;
	        justify-content: center;
	        color: #676767;
		}

		.hex-input {
		    margin: 0;
		    border-top-left-radius: 0;
		    border-bottom-left-radius: 0;
		    text-transform: lowercase;
		}

	</style>

	<script>
		FontAwesomeConfig = { autoReplaceSvg: 'nest' }
	</script>

	<script>
		if (window.location.hostname !== 'localhost') {
			console.log('running')
		    (function(f, a, t, h, o, m){
		        a[h]=a[h]||function(){
		            (a[h].q=a[h].q||[]).push(arguments)
		        };
		        o=f.createElement('script'),
		        m=f.getElementsByTagName('script')[0];
		        o.async=1; o.src=t; o.id='viewage-script';
		        m.parentNode.insertBefore(o,m)
		    })(document, window, 'https://stats.rknight.me/tracker.js', 'viewage');
		    viewage('set', 'siteId', '5f1984296f39b');
		    viewage('trackPageview');
		}
	</script>

	<script src="https://kit.fontawesome.com/1d7e8c2c3e.js" crossorigin="anonymous"></script>
	<script src="/assets/js/dom-to-image.min.js"></script>
	<script src="/assets/js/FileSaver.min.js"></script>

</head>	

<body onload="run()">

	<header class="header">
		<h1 class="header__main">{{ config.title }}</h1>
		<p class="header__subtitle">By <a href="https://twitter.com/rknightuk">Robb Knight</a></p>
	</header>

	<div class="image" id="preview">
		<img id="preview-overlay-image" class="overlay-image" src="/assets/img/backgrounds/pride.png" style="display: none">
		<div class="image__iconwrapper" id="preview-icon-wrap">
			<i id="preview-icon" class="{{ config.icon.prefix }} fa-{{ config.icon.icon }}"></i>
		</div>
	</div>

	<div class="generated-wrapper">
		<div class="image" id="generated">
			<img id="generated-overlay-image" class="overlay-image" src="/assets/img/backgrounds/plus-blank.png" style="display: none">
			<div class="image__iconwrapper" id="generated-icon-wrap">
				<i id="generated-icon" class="{{ config.icon.prefix }} fa-{{ config.icon.icon }}"></i>
			</div>
		</div>
	</div>

	<div class="buttons">
		<div class="size-wrapper">
			<div><button onclick="decreaseSize()"><i class="fas fa-minus"></i></button></div>
			<div id="icon-size">{{ config.icon.size }}</div>
			<div><button onclick="increaseSize()"><i class="fas fa-plus"></i></button></div>
		</div>
		<button id="random"><i class="fas fa-random"></i></button>
		<button id="download"><i class="fas fa-download"></i></button>
	</div>

	<details>
	  <summary>Popular Images</summary>
	  <div class="examples">
	  	{% for example in examples %}
				<div 
					class="example-card"
					data-background="{{ example.background }}" 
					data-color="{{ example.color }}" 
					data-icon="{{ example.icon.icon }}" 
					data-prefix="{{ example.icon.prefix }}" 
					data-size="{{ example.icon.size }}" 
					data-image="{{ example.image }}"
					style="background: {{ example.background }}"
					onclick="loadCard(event)"
				>
					<div class="example-card-icon">
						<i class="{{ example.icon.prefix }} fa-{{ example.icon.icon }}" style="color:{{ example.color }}"></i>
					</div>
				</div>
			{% endfor %}
	  </div>
	</details>

	<details>
	  <summary>Download History <button class="clear-history-button" onclick="clearHistory()">Clear</button></summary>
	  <div id="history" class="examples"></div>
	</details>

	<div class="config-wrapper">
		<div class="picker-wrapper">
			<div class="picker">
				<h2>Background Colour</h2>
				{% for color in colors.background %}
					<div class="color" onclick="setBackgroundColor('{{ color }}')" style="background: {{ color }};"></div>	
				{% endfor %}
				<div class="color-input">
					<input type="color" id="background-color-picker" value="{{ config.primary }}">
				</div>
				<div class="hex-input-wrap">
					<div class="hex-input-icon"><i class="fas fa-hashtag"></i></div>
					<input 
						maxlength="6" 
						type="text" 
						class="hex-input" 
						id="background-hex-input" 
						value="{{ config.primary.replace('#', '') }}"
					>
				</div>
			</div>
		</div>
		<div class="picker-wrapper">
			<div class="picker">
				<h2>Icon Colour</h2>
				{% for color in colors.icon %}
					<div class="color" onclick="setIconColor('{{ color }}')" style="background: {{ color }};"></div>	
				{% endfor %}
				<div class="color-input">
					<input type="color" id="icon-color-picker" value="{{ config.light }}">
				</div>
				<div class="hex-input-wrap">
					<div class="hex-input-icon"><i class="fas fa-hashtag"></i></div>
					<input 
						maxlength="6" 
						type="text" 
						class="hex-input" 
						id="icon-hex-input" 
						value="{{ config.light.replace('#', '') }}"
					>
				</div>
				<div style="clear:both;"><input type="checkbox" id="calc-contrast" checked="checked"><label class="calc-contrast-label" for="calc-contrast">auto change colour</label></div>
			</div>
		</div>
		<div class="picker-wrapper">
			<div class="picker">
				<h2>Background Image</h2>
				{% for image in images %}
					<img 
						src="/assets/img/backgrounds/{{ image.path }}" 
						class="background" 
						onclick="setBackgroundImage('/assets/img/backgrounds/{{ image.path }}', {% if image.type === 'light' %}true{% else %}false{% endif %})"
					>
				{% endfor %}
			</div>
		</div>
	</div>

	<div class="icon-search-wrapper">
		<input type="text" onkeyup="searchIcons()" id="icon-search" class="icon-search" placeholder="Search for an icon">
		<div class="icons">
			{% for icon in icons %}
				<div 
					title="{{ icon.key }}"
					data-key="{{ icon.key }}"
					data-prefix="{% if icon.free.includes('brands') %}fab{% else %}fas{% endif %}"
					data-keywords="{{ icon.label.toLowerCase() }} {% for keyword in icon.search.terms %} {{ keyword }} {% endfor%}"
					class="icons__single" 
					onclick="setIcon(
						'{{ icon.key }}', 
						'{% if icon.free.includes('brands') %}fab{% else %}fas{% endif %}'
					)"
				">
					<i class="{% if icon.free.includes('brands') %}fab{% else %}fas{% endif %} fa-{{ icon.key }}"></i>
				</div>
			{% endfor %}
		</div>
	</div>

	<footer class="footer">
		<p>{{ config.title }} by <a href="https://rknight.me">Robb Knight</a> | Icons from <a href="https://fontawesome.com/">Font Awesome</a></p>
		<p><a href="https://github.com/rknightuk/monzo-pot-image-generator">Source</a> | <a href="https://monzo.me/robbknight">Buy me a coffee</a> | <a href="https://community.monzo.com/t/monzo-pot-image-generator/102120">Discuss</a></p>
	</footer>

	<script>
		PotData = {
			icon: {
				icon: "{{ config.icon.icon }}",
				prefix: "{{ config.icon.prefix }}",
				size: "{{ config.icon.size }}",
			},
			color: "{{ config.light }}",
			background: "{{ config.primary }}",
			image: null,
		}

		run = function() {
			loadHistory()
		}
	</script>

	<script>
		update = function() {
			// background color
			const backgroundColor = PotData.background
			document.getElementById('generated').style.background = backgroundColor
			document.getElementById('preview').style.background = backgroundColor
			document.getElementById('background-color-picker').value = backgroundColor
			document.getElementById('background-hex-input').value = backgroundColor.replace('#', '')

			// icon color
			const iconColor = PotData.color
			document.getElementById('generated-icon').style.color = iconColor
			document.getElementById('preview-icon').style.color = iconColor
			document.getElementById('icon-color-picker').value = iconColor
			document.getElementById('icon-hex-input').value = iconColor.replace('#', '')

			// icon size
			const iconSize = PotData.icon.size
			document.getElementById('preview-icon-wrap').style.width = iconSize + 'px'
			document.getElementById('preview-icon-wrap').style.height = iconSize + 'px'
			document.getElementById('generated-icon-wrap').style.width = (parseInt(iconSize, 10) * 4) + 'px';
			document.getElementById('generated-icon-wrap').style.height = (parseInt(iconSize, 10) * 4) + 'px';
			document.getElementById('icon-size').innerHTML = iconSize

			// icon
			const icon = PotData.icon.icon
			const prefix = PotData.icon.prefix
			document.getElementById('generated-icon').className = prefix + ' fa-' + icon
			document.getElementById('preview-icon').className = prefix + ' fa-' + icon

			// background image
			const backgroundImage = PotData.image

			if (backgroundImage && backgroundImage !== 'null') {
				document.getElementById('preview-overlay-image').style.display = 'block'
				document.getElementById('preview-overlay-image').src = backgroundImage
				document.getElementById('generated-overlay-image').style.display = 'block'
				document.getElementById('generated-overlay-image').src = backgroundImage
			} else {
				document.getElementById('preview-overlay-image').style.display = 'none'
				document.getElementById('generated-overlay-image').style.display = 'none'
			}
		}

		changeSize = function(change) {
			const result = parseInt(PotData.icon.size, 10) + change
			if (result <= 200 && result >= 25) {
				PotData.icon.size = parseInt(PotData.icon.size, 10) + change
				update()
			}
		}

		increaseSize = function() { changeSize(25) }

		decreaseSize = function() { changeSize(-25) }

		contrastChangeEnabled = function() {
			return document.getElementById('calc-contrast').checked
		}

		setBackgroundColor = function(color, skipContrast) {
			PotData.background = color
			PotData.image = null
			if (contrastChangeEnabled()) {
				PotData.color = getIconColorFromBackground(color)
			}
			update()
		}

		setBackgroundColorFromPicker = function() {
			setBackgroundColor(document.getElementById('background-color-picker').value)
		}

		setBackgroundColorFromInput = function() {
			setBackgroundColor('#' + document.getElementById('background-hex-input').value)
		}

		setBackgroundImage = function(backgroundImage, setToDarkIcon) {
			PotData.image = backgroundImage
			if (contrastChangeEnabled()) PotData.color = setToDarkIcon ? "{{ config.dark }}" : "{{ config.light }}"
			update()
		}

		setIcon = function(icon, prefix) {
			PotData.icon = {
				icon: icon,
				prefix: prefix,
				size: PotData.icon.size
			}
			update()
		}

		setIconColor = function(iconColor) {
			PotData.color = iconColor
			update()
		}

		getIconColorFromBackground = function(bgColor) {
		   var nThreshold = 105;
		   var components = getRGBComponents(bgColor);
		   var bgDelta = (components.R * 0.299) + (components.G * 0.587) + (components.B * 0.114);

		   return (255 - bgDelta) < nThreshold ? "{{ config.dark }}" : "{{ config.light }}";
		}

		getRGBComponents = function(color) {
		    var r = color.substring(1, 3);
		    var g = color.substring(3, 5);
		    var b = color.substring(5, 7);

		    return {
		       R: parseInt(r, 16),
		       G: parseInt(g, 16),
		       B: parseInt(b, 16)
		    };
		}

		setIconColorFromPicker = function() {
			setIconColor(document.getElementById('icon-color-picker').value)
		}

		setIconColorFromInput = function() {
			setIconColor('#' + document.getElementById('icon-hex-input').value)
		}

		searchIcons = function() {
			const search = document.getElementById('icon-search').value.toLowerCase()

			Array.from(document.getElementsByClassName('icons__single')).forEach(function(element) {
				element.style.display = element.dataset.keywords.includes(search) ? 'block' : 'none'
			})
		}

		clearHistory = function() {
			window.localStorage.clear()
			document.getElementById('history').innerHTML = ''
		}

		getHistory = function() {
			return JSON.parse(window.localStorage.getItem('MPIG-history')) || []
		}

		loadCard = function(e) {
			let data = e.target.dataset
			if (e.target.className !== 'example-card') { // clicked the icon not the card itself
				data = e.target.closest('.example-card').dataset
			}
			PotData = {
				icon: {
					icon: data.icon,
					prefix: data.prefix,
					size: data.size,
				},
				color: data.color,
				background: data.background,
				image: data.image,
			}
			update()
		}

		addHistoryCard = function(data) {
			let card = document.createElement('div')
			card.className = 'example-card'
			card.style.background = data.background
			card.dataset.background = data.background
			card.dataset.color = data.color
			card.dataset.icon = data.icon.icon
			card.dataset.prefix = data.icon.prefix
			card.dataset.size = data.icon.size
			card.dataset.image = data.image
			card.onclick = loadCard

			if (data.image) {
				let image = document.createElement('img')
				image.src = data.image
				card.appendChild(image)
			}

			let icon = document.createElement('div')
			icon.className = 'example-card-icon'
			let i = document.createElement('i')
			i.className = data.icon.prefix + ' fa-' + data.icon.icon
			i.style.color = data.color
			icon.appendChild(i)
			card.appendChild(icon)

			const historyBlock = document.getElementById('history')
			historyBlock.insertBefore(card, historyBlock.childNodes[0])
		}

		loadHistory = function() {
			getHistory().reverse().map(h => addHistoryCard(h))
		}

		showHistory = function() {
			const cards = Array.from(document.getElementsByClassName('example-card'))
			if (cards.length === 10) {
				const oldest = cards.pop()
				oldest.parentNode.removeChild(oldest)
			}
			addHistoryCard(PotData)
		}

		updateHistory = function() {
			try {
				let history = getHistory()
				if (history.length === 10) {
					history.pop()
				}
				history.unshift(PotData)
				window.localStorage.setItem('MPIG-history', JSON.stringify(history))
				showHistory(history)
			} catch (e) {}
		}

		document.getElementById('background-color-picker').addEventListener("input", setBackgroundColorFromPicker, false)
		document.getElementById('icon-color-picker').addEventListener("input", setIconColorFromPicker, false)
		document.getElementById('background-hex-input').addEventListener("keyup", setBackgroundColorFromInput, false)
		document.getElementById('icon-hex-input').addEventListener("keyup", setIconColorFromInput, false)

		document.getElementById('download').onclick = function() {
		  domtoimage.toBlob(document.getElementById('generated'))
		      .then(function (blob) {
		      	// doing this twice fixes a bug where an image background wouldn't show on first download
		      	domtoimage.toBlob(document.getElementById('generated'))
		      	    .then(function (blob) {
		      	        window.saveAs(blob, 'monzo-pot-image-' + window.PotData.icon.icon + '-' + PotData.background.replace('#', '') + '.png');
		      	        updateHistory()
		      	    });
		      });
		}

		document.getElementById('random').onclick = function() {
			const icons = Array.from(document.getElementsByClassName('icons__single'))
			const randomElement = icons[Math.floor(Math.random() * icons.length)]
			const randomColor = '#' + Math.floor(Math.random()*16777215).toString(16)

			PotData.icon = {
				icon: randomElement.dataset.key,
				prefix: randomElement.dataset.prefix,
				size: PotData.icon.size,
			}
			PotData.color = getIconColorFromBackground(randomColor)
			PotData.background = randomColor
			PotData.image = null
			update()
		}
	</script>

	<a href="https://github.com/rknightuk/monzo-pot-image-generator" class="github-corner" aria-label="View source on GitHub"><svg width="50" height="50" viewBox="0 0 250 250" style="fill:{{config.primary}}; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>
</body>

</html>