<!DOCTYPE html>
<html lang="en">

<head>

	<meta charset="UTF-8" />

	<meta name="viewport" content="width=device-width" />
	<meta name="Description" content="{{ config.title }} - {{ config.description }}. Generate Monzo pot images online. Monzo online generator.">

	<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
	<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
	<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
	<link rel="manifest" href="/site.webmanifest">
	<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#ec5b5c">
	<meta name="msapplication-TileColor" content="#da532c">
	<meta name="theme-color" content="#EC5B5C">

	<meta name="twitter:card" content="summary" />
	<meta name="twitter:site" content="@rknightuk" />
	<meta name="twitter:title" content="{{ config.title }}" />
	<meta name="twitter:description" content="{{ config.description }}" />
	<meta name="twitter:image" content="https://potimages.rknight.me/assets/img/preview-image.png" />

	<title>{{ config.title }}</title>

	<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/kognise/water.css@latest/dist/light.min.css">
	<link href="https://fonts.googleapis.com/css2?family=Work+Sans:wght@700&display=swap" rel="stylesheet" crossorigin="anonymous">
	<link rel="stylesheet" href="/assets/css/style.css">

	<script>
		FontAwesomeConfig = { autoReplaceSvg: 'nest' }
	</script>

	<script src="https://cdn.usefathom.com/script.js" excluded-domains="localhost" site="HHYTRXSK" defer></script>

	<script defer src="/assets/js/fa-pro.min.js"></script>
	<script src="/assets/js/dom-to-image.min.js"></script>
	<script src="/assets/js/FileSaver.min.js"></script>

</head>	

<body onload="run()">

	<header class="header">
        <h1 class="header__main">
            <span class="header__icon"><i class="fas fa-money-check"></i></span> {{ config.title }}
        </h1>
    </header>

    <div class="preview-wrapper">
    	<div>
	    	<div class="image" id="preview" style="background:{{ config.primary }}">
	    		<img id="preview-overlay-image" class="overlay-image" src="/assets/img/backgrounds/pride.png" style="display: none">
	    		<div class="image__iconwrapper" id="preview-icon-wrap" style="color: {{ config.light }}">
	    			<i id="preview-icon" class="{{ config.icon.prefix }} fa-{{ config.icon.icon }}"></i>
	    		</div>
	    		<p class="image-text" id="preview-image-text" style="color: {{ config.light }}"></p>
	    	</div>
    	</div>
    	<div class="preview__controls">
    		<div class="preview__controls__manage">
    			<div class="preview__controls__manage__group">
    				<div class="preview__controls__manage__adjuster">
    					<div><button onclick="decreaseSize()"><i class="fas fa-minus"></i></button></div>
    					<input min="0" max="200" type="number" id="icon-size" style="text-align: center;" value="{{ config.icon.size }}">
    					<div><button onclick="increaseSize()"><i class="fas fa-plus"></i></button></div>
    				</div>
    				<div class="preview__controls__manage__adjuster">
    					<div><button onclick="rotateLeft()"><i class="fas fa-undo"></i></button></div>
    					<div id="rotation" class="preview__controls__manage__adjuster__value">{{ config.rotation }}&deg;</div>
    					<div><button onclick="rotateRight()"><i class="fas fa-redo"></i></button></div>
    				</div>
    			</div>
    			<div class="preview__controls__manage__group">
    				<button id="random"><i class="fas fa-random"></i></button>
    				<button id="download"><i class="fas fa-download"></i></button>
    			</div>
    		</div>
    		<details>
    		  <summary>Popular Images</summary>
    		  <div class="examples">
    		  	{% for example in examples %}
					<div 
						class="example-card"
						data-background="{{ example.background }}" 
						data-color="{{ example.color }}" 
						data-icon="{{ example.icon.icon }}" 
						data-prefix="{{ example.icon.prefix }}" 
						data-size="{{ example.icon.size }}" 
						data-image="{{ example.image }}"
						style="background: {{ example.background }}"
						onclick="loadCard(event)"
					>
						<div class="example-card-icon">
							<i class="{{ example.icon.prefix }} fa-{{ example.icon.icon }}" style="color:{{ example.color }}"></i>
						</div>
					</div>
				{% endfor %}
    		  </div>
    		</details>

    		<details>
    		  <summary>Download History <button class="clear-history-button" onclick="clearHistory()">Clear</button></summary>
    		  <div id="history" class="examples"></div>
    		</details>
    	</div>
    </div>

	<div class="generated-wrapper">
		<div class="image" id="generated" style="background:{{ config.primary }}">
			<img id="generated-overlay-image" class="overlay-image" src="/assets/img/backgrounds/plus-blank.png" style="display: none">
			<div class="image__iconwrapper" id="generated-icon-wrap" style="color: {{ config.light }}">
				<i id="generated-icon" class="{{ config.icon.prefix }} fa-{{ config.icon.icon }}"></i>
			</div>
			<p class="image-text" id="generated-image-text" style="color: {{ config.light }}"></p>
		</div>
	</div>

	<div class="config-wrapper">
		<div class="picker-wrapper">
			<div class="picker">
				<h2>Colour</h2>
				{% for color in colors.background %}
					<div class="color" onclick="setBackgroundColor('{{ color }}')" style="background: {{ color }};"></div>	
				{% endfor %}
				<div class="hex-input-wrap">
					<div class="hex-input-icon">
						<input type="color" class="hex-selector" id="background-color-picker" value="{{ config.primary }}">
					</div>
					<input 
						maxlength="6" 
						type="text" 
						class="hex-input" 
						id="background-hex-input" 
						value="{{ config.primary.replace('#', '') }}"
					>
				</div>
			</div>
		</div>
		<div class="picker-wrapper">
			<div class="picker">
				<h2>Gradient</h2>
				{% for gradient in gradients %}
					<div class="color" onclick="setGradientColor('{{ gradient.left }}', '{{ gradient.right }}')" style="background-image: linear-gradient(to top right, {{ gradient.left }}, {{ gradient.right }});"></div>	
				{% endfor %}
				<div class="hex-inputs" id="gradient-hex-inputs">
					<div class="hex-input-wrap">
						<div class="hex-input-icon">
							<input class="hex-selector" type="color" id="gradient-left-color-picker" value="">
						</div>
						<input 
							maxlength="6" 
							type="text" 
							class="hex-input" 
							id="gradient-left-hex-input" 
							value=""
						>
					</div>
					<div class="hex-input-wrap">
						<div class="hex-input-icon">
							<input class="hex-selector" type="color" id="gradient-right-color-picker" value="">
						</div>
						<input 
							maxlength="6" 
							type="text" 
							class="hex-input" 
							id="gradient-right-hex-input" 
							value=""
						>
					</div>
					<button id="random-gradient"><i class="fas fa-random"></i></button>
				</div>
			</div>
		</div>
		<div class="picker-wrapper">
			<div class="picker">
				<h2>Icon Colour</h2>
				{% for color in colors.icon %}
					<div class="color" onclick="setIconColor('{{ color }}')" style="background: {{ color }};"></div>	
				{% endfor %}
				<div class="hex-input-wrap">
					<div class="hex-input-icon">
						<input class="hex-selector" type="color" id="icon-color-picker" value="{{ config.light }}">
					</div>
					<input 
						maxlength="6" 
						type="text" 
						class="hex-input" 
						id="icon-hex-input" 
						value="{{ config.light.replace('#', '') }}"
					>
				</div>
				<div style="clear:both;"><input type="checkbox" id="calc-contrast" checked="checked"><label class="calc-contrast-label" for="calc-contrast">auto change colour</label></div>
			</div>
		</div>
		<div class="picker-wrapper">
			<div class="picker">
				<h2>Background Image</h2>
				{% for image in images %}
					<img 
						src="/assets/img/backgrounds/{{ image.path }}" 
						class="background" 
						onclick="setBackgroundImage('/assets/img/backgrounds/{{ image.path }}', {% if image.type === 'light' %}true{% else %}false{% endif %})"
					>
				{% endfor %}
				<div style="clear: both;"></div>
				<details>
					<summary>Text</summary>
					<input 
						type="text"
						id="text-input" 
						class="text-input" 
						value=""
						onkeyup="setText()" 
					>
					<div style="margin-top: 0">
						{% for color in colors.icon %}
							<div class="color" onclick="setTextColor('{{ color }}')" style="background: {{ color }};"></div>	
						{% endfor %}
						<div class="hex-input-wrap">
							<div class="hex-input-icon">
								<input type="color" class="hex-selector" id="text-color-picker" value="{{ config.light }}">
							</div>
							<input 
								maxlength="6" 
								type="text" 
								class="hex-input" 
								id="text-hex-input" 
								value="{{ config.light.replace('#', '') }}"
							>
						</div>
					</div>
				</details>
			</div>
		</div>
	</div>

	<div class="icon-search-wrapper">
		<div class="icon-filter">
			<input name="icon-filter" id="fas" value="fas" type="radio" checked="checked" onchange="search()"><label for="fas">Solid</label>
			<input name="icon-filter" id="far" value="far" type="radio" onchange="search()"><label for="far">Regular</label>
			<input name="icon-filter" id="fal" value="fal" type="radio" onchange="search()"><label for="fal">Light</label>
			<input name="icon-filter" id="fad" value="fad" type="radio" onchange="search()"><label for="fad">Duotone</label>
			<input name="icon-filter" id="fab" value="fab" type="radio" onchange="search()"><label for="fab">Brands</label>
		</div>
		<input type="text" onkeyup="search()" id="icon-search" class="icon-search" placeholder="Search for an icon">
		<div class="icons">
			{% for icon in pro %}
				<div 
					title="{{ icon.key }}"
					data-key="{{ icon.key }}"
					data-prefix="{{ icon.prefix }}"
					data-keywords="{% for keyword in icon.keywords %} {{ keyword }} {% endfor%}"
					class="icons__single" 
					onclick="setIcon(
						'{{ icon.key }}', 
						'{{ icon.prefix }}'
					)"
					style="{% if icon.prefix !== 'fas' %}display: none;{% endif %}
				">
					<i class="{{ icon.prefix }} fa-{{ icon.key }}"></i>
				</div>
			{% endfor %}
		</div>
	</div>

	<footer class="footer">
		<p><em>Generate images for your Monzo pots or your Starling goals</em></p>
		<p>{{ config.title }} by <a href="https://rknight.me">Robb Knight</a> | Icons from <a href="https://fontawesome.com/">Font Awesome</a></p>
		<p><a href="https://app.usefathom.com/share/hhytrxsk/potimages.rknight.me">Stats</a> | <a href="https://github.com/rknightuk/monzo-pot-image-generator">Source</a> | <a href="https://monzo.me/robbknight">Buy me a coffee</a> | <a href="https://community.monzo.com/t/monzo-pot-image-generator/102120">Discuss</a></p>
	</footer>

	<script>
		PotData = {
			icon: "{{ config.icon.icon }}",
			prefix: "{{ config.icon.prefix }}",
			size: "{{ config.icon.size }}",
			color: "{{ config.light }}",
			backgroundColor: "{{ config.primary }}",
			image: null
		}

		run = function() {
			loadHistory()
		}
	</script>

	<script>
		update = function() {
			// background color
			const backgroundColor = PotData.backgroundColor
			document.getElementById('generated').style.background = backgroundColor
			document.getElementById('preview').style.background = backgroundColor
			document.getElementById('background-color-picker').value = backgroundColor
			document.getElementById('background-hex-input').value = backgroundColor.replace('#', '')

			// background gradient
			const gradientLeft = PotData.gradientLeft
			const gradientRight = PotData.gradientRight
			if (gradientLeft && gradientRight) {
				document.getElementById('generated').style.background = 'none'
				document.getElementById('preview').style.background = 'none'
				const gradientStyle = 'linear-gradient(to top right, ' + gradientLeft + ', ' + gradientRight + ')'
				document.getElementById('preview').style.background = gradientStyle
				document.getElementById('generated').style.background = gradientStyle

				document.getElementById('gradient-left-color-picker').value = gradientLeft
				document.getElementById('gradient-right-color-picker').value = gradientRight
				document.getElementById('gradient-left-hex-input').value = gradientLeft.replace('#', '')
				document.getElementById('gradient-right-hex-input').value = gradientRight.replace('#', '')
			}

			// icon color
			const iconColor = PotData.color
			document.getElementById('generated-icon').style.color = iconColor
			document.getElementById('preview-icon').style.color = iconColor
			document.getElementById('icon-color-picker').value = iconColor
			document.getElementById('icon-hex-input').value = iconColor.replace('#', '')

			// icon size
			const iconSize = PotData.size
			document.getElementById('preview-icon-wrap').style.width = iconSize + 'px'
			document.getElementById('preview-icon-wrap').style.height = iconSize + 'px'
			document.getElementById('generated-icon-wrap').style.width = (parseInt(iconSize, 10) * 4) + 'px';
			document.getElementById('generated-icon-wrap').style.height = (parseInt(iconSize, 10) * 4) + 'px';
			document.getElementById('icon-size').value = iconSize

			// icon
			const icon = PotData.icon
			const prefix = PotData.prefix
			let iconClassName = prefix + ' fa-' + icon
			const rotation = PotData.rotation

			if (rotation >= 0) {
				if (rotation > 0) iconClassName += ' fa-rotate-' + rotation
				document.getElementById('rotation').innerHTML = rotation + '&deg;'
			}

			document.getElementById('generated-icon').className = iconClassName
			document.getElementById('preview-icon').className = iconClassName

			// background image
			const backgroundImage = PotData.image

			if (backgroundImage && backgroundImage !== 'null') {
				document.getElementById('preview-overlay-image').style.display = 'block'
				document.getElementById('preview-overlay-image').src = backgroundImage
				document.getElementById('generated-overlay-image').style.display = 'block'
				document.getElementById('generated-overlay-image').src = backgroundImage
			} else {
				document.getElementById('preview-overlay-image').style.display = 'none'
				document.getElementById('generated-overlay-image').style.display = 'none'
			}

			// text
			const text = PotData.text
			const textColor = PotData.textColor ? PotData.textColor : "{{ config.light }}"
			document.getElementById('text-color-picker').value = textColor
			document.getElementById('text-hex-input').value = textColor.replace('#', '')
			if (text != null) {
				document.getElementById('preview-image-text').innerHTML = text
				document.getElementById('preview-image-text').style.color = textColor
				document.getElementById('generated-image-text').innerHTML = text
				document.getElementById('generated-image-text').style.color = textColor
				document.getElementById('text-input').value = text
			}
		}

		changeSizeFromInput = function() {
			changeSize(parseInt(document.getElementById('icon-size').value, 10))
		}

		changeSize = function(result) {
			if (result > 200) { 
				result = 200
			} else if (result < 0) {
				result = 0
			}

			PotData.size = result
			update()
		}

		increaseSize = function() { changeSize(parseInt(PotData.size, 10) + 25) }
		decreaseSize = function() { changeSize(parseInt(PotData.size, 10) - 25) }

		rotate = function(change) {
			let result = parseInt(PotData.rotation ? PotData.rotation : 0, 10) + change
			if (result > 270) {
				result = 0
			} else if (result === -90) {
				result = 270
			} else if (result === -180) {
				result = 180
			}
			PotData.rotation = result
			update()
		}

		rotateLeft = function() { rotate(-90) }
		rotateRight = function() { rotate(90) }

		contrastChangeEnabled = function() {
			return document.getElementById('calc-contrast').checked
		}

		setBackgroundColor = function(color, skipContrast) {
			PotData.backgroundColor = color
			PotData.image = null
			PotData.gradientLeft = null
			PotData.gradientRight = null
			if (contrastChangeEnabled()) {
				PotData.color = getIconColorFromBackground(color)
			}
			update()
		}

		setGradientColor = function(left, right) {
			PotData.gradientLeft = left
			PotData.gradientRight = right
			PotData.image = null
			update()
		}

		setBackgroundColorFromPicker = function() {
			setBackgroundColor(document.getElementById('background-color-picker').value)
		}

		setBackgroundColorFromInput = function() {
			setBackgroundColor('#' + document.getElementById('background-hex-input').value)
		}

		setBackgroundImage = function(backgroundImage, setToDarkIcon) {
			PotData.image = backgroundImage
			PotData.gradientLeft = null
			PotData.gradientRight = null
			if (contrastChangeEnabled()) PotData.color = setToDarkIcon ? "{{ config.dark }}" : "{{ config.light }}"
			update()
		}

		setText = function() {
			PotData.text = document.getElementById('text-input').value
			update()
		}

		setIcon = function(icon, prefix) {
			PotData.icon = icon
			PotData.prefix = prefix
			update()
		}

		setIconColor = function(iconColor) {
			PotData.color = iconColor
			update()
		}

		setTextColor = function(color) {
			PotData.textColor = color
			update()
		}

		getIconColorFromBackground = function(bgColor) {
		   var nThreshold = 105;
		   var components = getRGBComponents(bgColor);
		   var bgDelta = (components.R * 0.299) + (components.G * 0.587) + (components.B * 0.114);

		   return (255 - bgDelta) < nThreshold ? "{{ config.dark }}" : "{{ config.light }}";
		}

		getRGBComponents = function(color) {
		    var r = color.substring(1, 3);
		    var g = color.substring(3, 5);
		    var b = color.substring(5, 7);

		    return {
		       R: parseInt(r, 16),
		       G: parseInt(g, 16),
		       B: parseInt(b, 16)
		    };
		}

		setIconColorFromPicker = function() {
			setIconColor(document.getElementById('icon-color-picker').value)
		}

		setTextColorFromPicker = function() {
			setTextColor(document.getElementById('text-color-picker').value)
		}

		setIconColorFromInput = function() {
			setIconColor('#' + document.getElementById('icon-hex-input').value)
		}

		setTextColorFromInput = function() {
			setTextColor('#' + document.getElementById('text-hex-input').value)
		}

		setGradientFromPickers = function() {
			setGradientColor(
				document.getElementById('gradient-left-color-picker').value,
				document.getElementById('gradient-right-color-picker').value
			)
		}

		setGradientFromInputs = function() {
			setGradientColor(
				document.getElementById('gradient-left-hex-input').value ? '#' + document.getElementById('gradient-left-hex-input').value : null,
				document.getElementById('gradient-right-hex-input').value ? '#' + document.getElementById('gradient-right-hex-input').value : null,
			)
		}

		search = function() {
			const search = document.getElementById('icon-search').value.toLowerCase()
			const filters = [document.querySelector('input[name="icon-filter"]:checked').value]

			Array.from(document.getElementsByClassName('icons__single')).forEach(function(element) {
				const keywordMatch = element.dataset.keywords.includes(search)
				const filterMatch = filters.includes(element.dataset.prefix)
				element.style.display = keywordMatch && filterMatch ? 'block' : 'none'
			})
		}

		clearHistory = function() {
			window.localStorage.clear()
			document.getElementById('history').innerHTML = ''
		}

		getHistory = function() {
			return JSON.parse(window.localStorage.getItem('MPIG-history')) || []
		}

		loadCard = function(e) {
			let data = e.target.dataset
			if (e.target.className !== 'example-card') { // clicked the icon not the card itself
				data = e.target.closest('.example-card').dataset
			}
			PotData = {
				icon: data.icon,
				prefix: data.prefix,
				size: data.size,
				color: data.color,
				backgroundColor: data.background,
				image: data.image != null ? data.image : '',
				gradientLeft: data.gradientLeft,
				gradientRight: data.gradientRight,
				rotation: data.rotation ? data.rotation : 0,
				text: data.text != null ? data.text : '',
				textColor: data.textColor != null ? data.textColor : "{{config.light}}",
			}
			update()
		}

		addHistoryCard = function(data) {
			let card = document.createElement('div')
			card.className = 'example-card'
			card.style.background = data.backgroundColor
			if (data.gradientLeft && data.gradientRight && data.gradientLeft !== 'null' && data.gradientRight !== 'null') {
				card.style.background = 'linear-gradient(to top right, ' + data.gradientLeft + ', ' + data.gradientRight + ')'
				card.dataset.gradientLeft = data.gradientLeft
				card.dataset.gradientRight = data.gradientRight
			}
			if (data.rotation) {
				card.dataset.rotation = data.rotation
			}
			card.dataset.background = data.backgroundColor
			card.dataset.color = data.color
			card.dataset.icon = data.icon
			card.dataset.prefix = data.prefix
			card.dataset.size = data.size
			card.dataset.image = data.image
			card.dataset.text = data.text
			card.dataset.textColor = data.textColor
			card.onclick = loadCard

			if (data.image) {
				let image = document.createElement('img')
				image.src = data.image
				card.appendChild(image)
			}

			if (data.text != null) {
				let text = document.createElement('p')
				text.className = 'example-card-text image-text'
				text.innerHTML = data.text
				text.style.color = data.textColor
				card.appendChild(text)
			}

			let icon = document.createElement('div')
			icon.className = 'example-card-icon'
			let i = document.createElement('i')
			i.className = data.prefix + ' fa-' + data.icon
			if (data.rotation) {
				i.className += ' fa-rotate-' + data.rotation
			}
			i.style.color = data.color
			icon.appendChild(i)
			card.appendChild(icon)

			const historyBlock = document.getElementById('history')
			historyBlock.insertBefore(card, historyBlock.childNodes[0])
		}

		loadHistory = function() {
			getHistory().reverse().map(h => addHistoryCard(h))
		}

		showHistory = function() {
			const cards = Array.from(document.getElementsByClassName('example-card'))
			if (cards.length === 10) {
				const oldest = cards.pop()
				oldest.parentNode.removeChild(oldest)
			}
			addHistoryCard(PotData)
		}

		updateHistory = function() {
			try {
				let history = getHistory()
				if (history.length === 10) {
					history.pop()
				}
				history.unshift(PotData)
				window.localStorage.setItem('MPIG-history', JSON.stringify(history))
				showHistory(history)
			} catch (e) {}
		}

		document.getElementById('background-color-picker').addEventListener("input", setBackgroundColorFromPicker, false)
		document.getElementById('icon-color-picker').addEventListener("input", setIconColorFromPicker, false)
		document.getElementById('gradient-left-color-picker').addEventListener("input", setGradientFromPickers, false)
		document.getElementById('gradient-right-color-picker').addEventListener("input", setGradientFromPickers, false)
		document.getElementById('text-color-picker').addEventListener("input", setTextColorFromPicker, false)

		document.getElementById('background-hex-input').addEventListener("keyup", setBackgroundColorFromInput, false)
		document.getElementById('icon-hex-input').addEventListener("keyup", setIconColorFromInput, false)
		document.getElementById('gradient-left-hex-input').addEventListener("keyup", setGradientFromInputs, false)
		document.getElementById('gradient-right-hex-input').addEventListener("keyup", setGradientFromInputs, false)
		document.getElementById('text-hex-input').addEventListener("keyup", setTextColorFromInput, false)

		document.getElementById('icon-size').addEventListener("change", changeSizeFromInput, false)
		document.getElementById('icon-size').addEventListener("keyup", changeSizeFromInput, false)

		document.getElementById('download').onclick = function() {
		  domtoimage.toBlob(document.getElementById('generated'))
		      .then(function (blob) {
		      	// doing this twice fixes a bug where an image background wouldn't show on first download
		      	domtoimage.toBlob(document.getElementById('generated'))
		      	    .then(function (blob) {
		      	        window.saveAs(blob, 'monzo-pot-image-' + window.PotData.icon + '-' + PotData.backgroundColor.replace('#', '') + '.png');
		      	        updateHistory()
		      	    });
		      });

	      if (window.fathom) window.fathom.trackGoal('QAZHZCEC', 0);
		}

		document.getElementById('random').onclick = function() {
			const icons = Array.from(document.getElementsByClassName('icons__single'))
			const randomElement = icons[Math.floor(Math.random() * icons.length)]
			const randomColor = '#' + ("000000" + Math.random().toString(16).slice(2, 8).toUpperCase()).slice(-6)

			PotData.icon = randomElement.dataset.key,
			PotData.prefix = randomElement.dataset.prefix,
			PotData.size = PotData.size,
			PotData.color = getIconColorFromBackground(randomColor)
			PotData.backgroundColor = randomColor
			PotData.image = null
			PotData.gradientLeft = null
			PotData.gradientRight = null
			PotData.rotation = 0
			update()
		}

		document.getElementById('random-gradient').onclick = function() {
			const randomColor = '#' + ("000000" + Math.random().toString(16).slice(2, 8).toUpperCase()).slice(-6)
			const randomColor2 = '#' + ("000000" + Math.random().toString(16).slice(2, 8).toUpperCase()).slice(-6)

			PotData.image = null
			PotData.gradientLeft = randomColor
			PotData.gradientRight = randomColor2
			update()
		}
	</script>

	<a href="https://github.com/rknightuk/monzo-pot-image-generator" class="github-corner" aria-label="View source on GitHub"><svg width="50" height="50" viewBox="0 0 250 250" style="fill:{{config.primary}}; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>
</body>

</html>