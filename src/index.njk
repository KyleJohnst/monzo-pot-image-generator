<html>

<head>

	<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/kognise/water.css@latest/dist/light.min.css">

	<style type="text/css">
		.image-wrapper {
			margin: 0 auto;
			background: {{ defaults.primary }};
			display: flex;
			align-items: center;
			justify-content: center;
			border-radius: 10px;
		}

		#preview {
			width: 316px;
			height: 205px;
			box-shadow: 3px 3px 2px 0px rgba(214,214,214,1);
			margin-bottom: 20px;
		}

		.icon {
			color: #f3fdff;
		}

		#preview svg {
			width: 100px;
			height: 100px;
		}

		.wrapper {
			overflow: hidden;
			height: 0;
		}

		#generated {
			width: 1266px;
			height: 822px;
		}

		#generated svg {
			width: 400px;
			height: 400px;
		}

		.manage {
			text-align: center;
		}

		.buttons {
			display: flex;
			align-items: center;
			justify-content: center;
		}

		.share-link {
			display: flex;
			justify-content: center;
			align-items: center;
			font-weight: bold;
		}

		.color-pickers {
			margin-bottom: 10px;
		}

		.color-wrapper {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(40px, 1fr));
			align-items: center;
			justify-content: center;
		}

		.color {
			width: 40px;
			height: 40px;
			cursor: pointer;
			margin: 0 auto;
			border: 1px solid #b5b5b5;
		}

		#calc-contrast {
			margin-bottom: 15px;
		}

		.icon-search-wrapper {
			margin-top: 20px;
		}

		.icon-search {
			width: 100%;
		}

		.icons {
			height: 400px;
			overflow: auto;
			display: flex;
			flex-wrap: wrap;
			justify-content: space-between;
		}

		.icons__single {
			text-align: center;
			cursor: pointer;
			padding: 5px;
			flex-basis: 75px;
			font-size: 40px;
		}

		.icons__single:hover {
			background: #f3f3f3;
		}

	</style>

	<script src="https://kit.fontawesome.com/1d7e8c2c3e.js" crossorigin="anonymous"></script>
	<script src="assets/clipboard.min.js"></script>
	<script src="assets/dom-to-image.min.js"></script>
	<script src="assets/FileSaver.min.js"></script>

</head>	

<body onload="run()">

	<div id="preview" class="image-wrapper preview">
		<div class="icon">
			<i id="preview-icon" class="{{ defaults.icon.prefix }} fa-{{ defaults.icon.icon }}"></i>
		</div>
	</div>

	<div class="manage">
		<div class="buttons">
			<button id="random"><i class="fas fa-random"></i> Randomise</button>
			<button id="download"><i class="fas fa-download"></i> Download</button>
		</div>
		<h3>Share Your Image</h3>
		<div class="share-link">
			<input type="text" id="share-link" onfocus="this.select()">
			<button id="share-link-copy" data-clipboard-target="#share-link"><i class="fas fa-copy"></i></button>
			<button onclick="shareToTwitter()"><i class="fab fa-twitter"></i></button>
		</div>
	</div>

	<div class="wrapper">
		<div id="generated" class="image-wrapper">
			<div class="icon">
				<i id="generated-icon" class="{{ defaults.icon.prefix }} fa-{{ defaults.icon.icon }}"></i>
			</div>
		</div>
	</div>

	<div class="color-pickers">
		<h3>Background Colour:</h3>
		<div class="color-wrapper">
			{% for color in colors.background %}
				<div class="color" onclick="setBackgroundColor('{{ color }}')" style="background: {{ color }};"></div>	
			{% endfor %}
			<input type="color" class="color" id="background-color-picker" value="{{ defaults.primary }}">
		</div>

		<h3>Icon Colour:</h3>
		<input type="checkbox" id="calc-contrast" checked="checked"><label for="calc-contrast">automatically adjust icon contrast</label>
		<div class="color-wrapper">
			{% for color in colors.icon %}
				<div class="color" onclick="setIconColor('{{ color }}')" style="background: {{ color }};"></div>	
			{% endfor %}
			<input type="color" class="color" id="icon-color-picker" value="{{ defaults.light }}">
		</div>
	</div>

	<div class="icon-search-wrapper">
		<input type="text" onkeyup="searchIcons()" id="icon-search" class="icon-search" placeholder="Search for an icon">
		<div class="icons">
			{% for icon in icons %}
				<div 
					data-key="{{ icon.key }}"
					data-prefix="{% if icon.free.includes('brands') %}fab{% else %}fas{% endif %}"
					data-keywords="{{ icon.label.toLowerCase() }} {% for keyword in icon.search.terms %} {{ keyword }} {% endfor%}"
					class="icons__single" 
					onclick="setIcon(
						'{{ icon.key }}', 
						'{% if icon.free.includes('brands') %}fab{% else %}fas{% endif %}'
					)"
				">
					<i class="{% if icon.free.includes('brands') %}fab{% else %}fas{% endif %} fa-{{ icon.key }}"></i>
				</div>
			{% endfor %}
		</div>
	</div>

	<script>

		function shareToTwitter() {
			window.open('https://twitter.com/intent/tweet?text=Check out my Monzo pot image!&url=' + encodeURIComponent(generateFullUrl()))
		}

		function generateQueryString() {
			return "i=" + PotData.icon.icon + 
				"&ip=" + PotData.icon.prefix + 
				"&c=" + PotData.color.replace('#', '') + 
				"&bg=" + PotData.background.replace('#', '')
		}

		function generateFullUrl() {
			return window.location.href + '?' + generateQueryString()
		}

		function updateData(key, value) {
			window.PotData[key] = value

			document.getElementById('share-link').value = generateFullUrl()
		}

		function setIconColor(iconColor) {
			Array.from(document.getElementsByClassName('icon')).forEach(function(icon) {
				icon.style.color = iconColor
			})
			document.getElementById('icon-color-picker').value = iconColor
			updateData('color', iconColor)
		}

		function setIconColorFromBackground(bgColor) {
			if (!document.getElementById('calc-contrast').checked) return
		   var nThreshold = 105;
		   var components = getRGBComponents(bgColor);
		   var bgDelta = (components.R * 0.299) + (components.G * 0.587) + (components.B * 0.114);

		   const iconColor = ((255 - bgDelta) < nThreshold) ? "{{ defaults.dark }}" : "{{ defaults.light }}";
		   setIconColor(iconColor)
		}

		function getRGBComponents(color) {       

		    var r = color.substring(1, 3);
		    var g = color.substring(3, 5);
		    var b = color.substring(5, 7);

		    return {
		       R: parseInt(r, 16),
		       G: parseInt(g, 16),
		       B: parseInt(b, 16)
		    };
		}

		setBackgroundColor = function(color) {
			document.getElementById('generated').style.background = color
			document.getElementById('preview').style.background = color
			document.getElementById('background-color-picker').value = color
			setIconColorFromBackground(color)
			updateData('background', color)
		}

		setBackgroundColorFromInput = function() {
			setBackgroundColor(document.getElementById('background-color-picker').value)
		}

		setIcon = function(icon, prefix) {
			document.getElementById('generated-icon').className = prefix + ' fa-' + icon
			document.getElementById('preview-icon').className = prefix + ' fa-' + icon
			updateData('icon', {
				icon: icon,
				prefix: prefix,
			})
		}

		searchIcons = function() {
			const search = document.getElementById('icon-search').value

			Array.from(document.getElementsByClassName('icons__single')).forEach(function(element) {
				element.style.display = element.dataset.keywords.includes(search) ? 'block' : 'none'
			})
		}

		document.getElementById('background-color-picker').addEventListener("input", setBackgroundColorFromInput, false)

		document.getElementById('download').onclick = function() {
		  domtoimage.toBlob(document.getElementById('generated'))
		      .then(function (blob) {
		          window.saveAs(blob, 'my-node.png');
		      });
		}

		document.getElementById('random').onclick = function() {
			const icons = Array.from(document.getElementsByClassName('icons__single'))
			const randomElement = icons[Math.floor(Math.random() * icons.length)]
			setIcon(randomElement.dataset.key, randomElement.dataset.prefix)
			var randomColor = '#' + Math.floor(Math.random()*16777215).toString(16)
			setBackgroundColor(randomColor)
		}

		run = function() {
			new ClipboardJS('button');

			window.PotData = {
				icon: {
					icon: "{{ defaults.icon.icon }}",
					prefix: "{{ defaults.icon.prefix }}"
				},
				color: "{{ defaults.light }}",
				background: "{{ defaults.primary }}"
			}

			const urlParams = new URLSearchParams(window.location.search);
			const iconData = {
				icon: null,
				prefix: null,
			}
			iconData.icon = urlParams.get('i')
			iconData.prefix = urlParams.get('ip')
			setIconColor('#' + urlParams.get('c'))
			setBackgroundColor('#' + urlParams.get('bg'))
			
			if (iconData.icon && iconData.prefix) {
				setIcon(iconData.icon, iconData.prefix)
			}
		}
	</script>

	<script>
		FontAwesomeConfig = { autoReplaceSvg: 'nest' }
	</script>
</body>

</html>